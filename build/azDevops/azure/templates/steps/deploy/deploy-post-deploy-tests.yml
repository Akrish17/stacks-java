parameters:
  environment: ""
  pipeline_scripts_directory: ""
  functional_test: ""
  functional_test_artefact_name: ""
  functional_test_artefact_download_location: ""
  functional_test_base_url: ""
  maven_cache_directory: ""
  maven_ignored_post_deploy_test_tags: ""
  maven_post_deploy_html_report_directory: ""
  docker_java_container: ""
steps:
  - ${{ if eq(parameters.functional_test, true) }}:
      - download: current
        artifact: "${{ parameters.functional_test_artefact_name }}"
        displayName: "Download: Post-Deploy Test Artefacts"

      # Copy this for each tag you have, for example @Functional and @Smoke etc.
      # Note: Don't forget to update the `maven_allowed_post_deploy_test_tags` in the root pipeline file.
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-post-deploy-tagged-test-run.bash"
          arguments: >
            -a "@Functional"
            -b "${{ parameters.functional_test_base_url }}"
            -Y "${{ parameters.maven_ignored_post_deploy_test_tags }}"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.functional_test_artefact_download_location }}"
        target:
          container: ${{ parameters.docker_java_container }}
        displayName: "Post-Deploy Test: Run Functional Tests"

      # Run after all Post-Deploy tests to aggregate Serenity reports.
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-serenity-aggregate.bash"
          arguments: >
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.functional_test_artefact_download_location }}"
        target:
          container: ${{ parameters.docker_java_container }}
        displayName: "Post-Deploy Test: Serenity Report Aggregate"

      # Run after all Post-Deploy tests to check if they ran successfully or not.
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-post-deploy-test-verify.bash"
          arguments: >
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.functional_test_artefact_download_location }}"
        target:
          container: ${{ parameters.docker_java_container }}
        displayName: "Post-Deploy Test: Verifies Test Run"

      - task: PublishPipelineArtifact@1
        inputs:
          path: "${{ parameters.functional_test_artefact_path }}/${{ parameters.maven_post_deploy_html_report_directory }}"
          artifact: "${{ parameters.environment }}-${{ parameters.functional_test_artefact_name }}-report"
        displayName: "Publish: Post-Deploy Tests Artefact"

      - task: PublishTestResults@2
        condition: always()
        displayName: "Publish Post-Deploy Test Results"
