parameters:
  repo_root_dir: ""
  project_root_dir: ""
  pipeline_scripts_directory: ""
  # TODO: Pull up?
  maven_cache_directory: "./.m2"
  maven_surefire_reports_dir: "target/surefire-reports"
  maven_allowed_test_tags: "Unit | Component | Integration | Functional | Performance | Smoke"
  # PR / Branch vars
  source_branch_ref: ""
  target_branch_ref: ""
  pullrequest_number: ""
  # Docker Config
  docker_build: true
  docker_build_additional_args: ""
  docker_build_container: ""
  docker_workdir: ""
  docker_imagename: ""
  docker_imagetag: ""
  docker_containerregistryname: ""
  # TODO: Vulnerability Scans
  # # Vulnerability Scanning
  # vulnerability_scan: false
  # vulnerability_workdir: ""
  #  Static Code Analysis
  static_code_analysis: true
  sonar_host_url: ""
  sonar_project_name: ""
  sonar_project_key: ""
  sonar_token: ""
  sonar_organisation: ""
  sonar_pullrequest_provider: ""
  sonar_remote_repo: ""
  sonar_container: ""
  sonar_command: ""
  # contract_test: true
  # # audit_test: false
  # contract_check_can_deploy: true
  # cypress_e2e_test: true
  # cypress_applitools_test: false
  # cypress_e2e_env_vars: {}
  # Build File Output
  build_file: false
  build_file_path: ""
  build_file_artefact: ""

steps:
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/${{ parameters.maven_cache_directory }}"
    displayName: Cache Maven packages

  - bash: |
      echo "URL: ${{ parameters.sonar_host_url }}"
      echo "Name: ${{ parameters.sonar_project_name }}"
      echo "Key: ${{ parameters.sonar_project_key }}"
      echo "Token: ${{ parameters.sonar_token }}"
      echo "Org: ${{ parameters.sonar_organisation }}"
      echo "Build Num: ${{ parameters.docker_imagetag }}"
      echo "Source Branch: ${{ parameters.source_branch_ref }}"
      echo "Sonar Command: ${{ parameters.sonar_command }}"
      echo "Remote Repo: ${{ parameters.sonar_remote_repo }}"
      echo "PR Prov: ${{ parameters.sonar_pullrequest_provider }}"
      echo "Target Branch: ${{ parameters.target_branch_ref }}"
      echo "PR Num: ${{ parameters.pullrequest_number }}"
    displayName: "Test"

  # Login to Azure/AKS
  - template: azDevOps/azure/templates/v2/steps/login-services.yml@templates
    parameters:
      azure_tenant_id: "$(azure_tenant_id)"
      azure_subscription_id: "$(azure_subscription_id)"
      azure_client_id: "$(azure_client_id)"
      azure_client_secret: "$(azure_client_secret)"
      login_azure: true

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Install Packages"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Compile Application"

    # TODO: move hardcoded args up to main script.
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-download-test-deps.bash"
      arguments: >
        -X "${{ parameters.maven_allowed_test_tags }}"
        -Y "${{ parameters.maven_surefire_reports_dir }}"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Download Test Deps"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Unit"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Unit tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Component"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Component tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Integration"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Integration tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-generate-jacoco-report.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Generate Jacoco coverage reports"

  # TODO: Pull this out into a bash script?
  - bash: |
      set -euxo pipefail
      cp "${{ parameters.repo_root_dir }}/build/azDevops/azure/coverage/"* .
      npm i
      ./node_modules/.bin/gulp inline-css-images
      ./node_modules/.bin/gulp inline-sources
    workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
    target:
      container: node
    displayName: "Gulp: Inline Jacoco report assets"

  # SonarCloud
  - ${{ if eq(parameters.static_code_analysis, true) }}:
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-sonar-scanner.bash"
          arguments: >
            -a "${{ parameters.sonar_host_url }}"
            -b "${{ parameters.sonar_project_name }}"
            -c "${{ parameters.sonar_project_key }}"
            -d "${{ parameters.sonar_token }}"
            -e "${{ parameters.sonar_organisation }}"
            -f "${{ parameters.docker_imagetag }}"
            -g "${{ parameters.source_branch_ref }}"
            -V "${{ parameters.sonar_command }}"
            -W "${{ parameters.sonar_remote_repo }}"
            -X "${{ parameters.sonar_pullrequest_provider }}"
            -Y "${{ parameters.target_branch_ref }}"
            -Z "${{ parameters.pullrequest_number }}"
          working_directory: "${{ parameters.project_root_dir }}"
        target:
          container: "${{ parameters.sonar_container }}"
        displayName: "Static Analysis: SonarScanner Run"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-docker-image.bash"
      arguments: >
        -a "${{ parameters.docker_build_additional_args }}"
        -b "${{ parameters.docker_imagename }}"
        -c "${{ parameters.docker_imagetag }}"
        -d "${{ parameters.docker_containerregistryname }}"
        -Z ".azurecr.io"
      workingDirectory: ${{ parameters.docker_workdir }}
    displayName: "Build Container Image"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-docker-image-push.bash"
      arguments: >
        -a "${{ parameters.docker_imagename }}"
        -b "${{ parameters.docker_imagetag }}"
        -c "${{ parameters.docker_containerregistryname }}"
        -Y "false"
        -Z ".azurecr.io"
      workingDirectory: ${{ parameters.docker_workdir }}
    displayName: "Push Container Image to Azure Container Registry"

  - task: PublishTestResults@2

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "JaCoCo"
      summaryFileLocation: "${{ parameters.project_root_dir }}/target/site/jacoco/jacoco.xml"
      reportDirectory: "${{ parameters.project_root_dir }}/target/site/jacoco-inline"

  # Publish Artefacts if required
  - ${{ if eq(parameters.functional_test, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: "Publish: Functional Tests Artifact"
        inputs:
          path: "${{ parameters.functional_test_path }}"
          artifact: "${{ parameters.functional_test_artefact }}"

  - ${{ if eq(parameters.build_file, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: "Publish: Build Artefacts"
        inputs:
          path: "${{ parameters.build_file_path }}"
          artifact: "${{ parameters.build_file_artefact }}"
