parameters:
  repo_root_dir: ""
  project_root_dir: ""
  pipeline_scripts_directory: ""
  # Maven
  maven_cache_directory: ""
  maven_surefire_reports_dir: ""
  maven_allowed_test_tags: ""
  # Docker Config
  docker_build_container: ""
  # TODO: Vulnerability Scans
  # # Vulnerability Scanning
  # vulnerability_scan: false
  # vulnerability_workdir: ""
  project_type: ""

steps:
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/${{ parameters.maven_cache_directory }}"
    displayName: Cache Maven packages (Java App)

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Install Packages"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-compile.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Compile Application"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-download-test-deps.bash"
      arguments: >
        -X "${{ parameters.maven_allowed_test_tags }}"
        -Y "${{ parameters.maven_surefire_reports_dir }}"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Download Test Deps"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Unit"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Unit tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Component"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Component tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Integration"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Integration tests"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-generate-jacoco-report.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Generate Jacoco coverage reports"

  # TODO: Pull this out into a bash script?
  - bash: |
      set -euxo pipefail
      cp "${{ parameters.repo_root_dir }}/build/azDevops/azure/coverage/"* .
      npm i
      ./node_modules/.bin/gulp inline-css-images
      ./node_modules/.bin/gulp inline-sources
    workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
    target:
      container: node
    displayName: "Gulp: Inline Jacoco report assets"
